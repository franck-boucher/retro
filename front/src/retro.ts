// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: retro.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "retro";

export interface Sticky {
  owner: string;
  selectedBy?: string | undefined;
  X: number;
  Y: number;
  height: number;
  content: string;
}

export interface User {
  name: string;
  hasSelected?: string | undefined;
}

export interface State {
  stickies: { [key: string]: Sticky };
  users: { [key: string]: User };
}

export interface State_StickiesEntry {
  key: string;
  value: Sticky | undefined;
}

export interface State_UsersEntry {
  key: string;
  value: User | undefined;
}

export interface SelectAction {
  StickyID: string;
}

export interface AddAction {
  X: number;
  Y: number;
}

export interface MoveAction {
  StickyID: string;
  X: number;
  Y: number;
}

export interface EditAction {
  StickyID: string;
  content: string;
}

export interface Action {
  select?: SelectAction | undefined;
  add?: AddAction | undefined;
  move?: MoveAction | undefined;
  edit?: EditAction | undefined;
}

function createBaseSticky(): Sticky {
  return { owner: "", selectedBy: undefined, X: 0, Y: 0, height: 0, content: "" };
}

export const Sticky: MessageFns<Sticky> = {
  encode(message: Sticky, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.selectedBy !== undefined) {
      writer.uint32(18).string(message.selectedBy);
    }
    if (message.X !== 0) {
      writer.uint32(24).int64(message.X);
    }
    if (message.Y !== 0) {
      writer.uint32(32).int64(message.Y);
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.content !== "") {
      writer.uint32(50).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sticky {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSticky();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.selectedBy = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.X = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.Y = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.height = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sticky {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      selectedBy: isSet(object.selectedBy) ? globalThis.String(object.selectedBy) : undefined,
      X: isSet(object.X) ? globalThis.Number(object.X) : 0,
      Y: isSet(object.Y) ? globalThis.Number(object.Y) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: Sticky): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.selectedBy !== undefined) {
      obj.selectedBy = message.selectedBy;
    }
    if (message.X !== 0) {
      obj.X = Math.round(message.X);
    }
    if (message.Y !== 0) {
      obj.Y = Math.round(message.Y);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sticky>, I>>(base?: I): Sticky {
    return Sticky.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sticky>, I>>(object: I): Sticky {
    const message = createBaseSticky();
    message.owner = object.owner ?? "";
    message.selectedBy = object.selectedBy ?? undefined;
    message.X = object.X ?? 0;
    message.Y = object.Y ?? 0;
    message.height = object.height ?? 0;
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseUser(): User {
  return { name: "", hasSelected: undefined };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.hasSelected !== undefined) {
      writer.uint32(18).string(message.hasSelected);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hasSelected = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      hasSelected: isSet(object.hasSelected) ? globalThis.String(object.hasSelected) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.hasSelected !== undefined) {
      obj.hasSelected = message.hasSelected;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.name = object.name ?? "";
    message.hasSelected = object.hasSelected ?? undefined;
    return message;
  },
};

function createBaseState(): State {
  return { stickies: {}, users: {} };
}

export const State: MessageFns<State> = {
  encode(message: State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.stickies).forEach(([key, value]) => {
      State_StickiesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    Object.entries(message.users).forEach(([key, value]) => {
      State_UsersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = State_StickiesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.stickies[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = State_UsersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.users[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): State {
    return {
      stickies: isObject(object.stickies)
        ? Object.entries(object.stickies).reduce<{ [key: string]: Sticky }>((acc, [key, value]) => {
          acc[key] = Sticky.fromJSON(value);
          return acc;
        }, {})
        : {},
      users: isObject(object.users)
        ? Object.entries(object.users).reduce<{ [key: string]: User }>((acc, [key, value]) => {
          acc[key] = User.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: State): unknown {
    const obj: any = {};
    if (message.stickies) {
      const entries = Object.entries(message.stickies);
      if (entries.length > 0) {
        obj.stickies = {};
        entries.forEach(([k, v]) => {
          obj.stickies[k] = Sticky.toJSON(v);
        });
      }
    }
    if (message.users) {
      const entries = Object.entries(message.users);
      if (entries.length > 0) {
        obj.users = {};
        entries.forEach(([k, v]) => {
          obj.users[k] = User.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State>, I>>(base?: I): State {
    return State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State>, I>>(object: I): State {
    const message = createBaseState();
    message.stickies = Object.entries(object.stickies ?? {}).reduce<{ [key: string]: Sticky }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Sticky.fromPartial(value);
      }
      return acc;
    }, {});
    message.users = Object.entries(object.users ?? {}).reduce<{ [key: string]: User }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = User.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseState_StickiesEntry(): State_StickiesEntry {
  return { key: "", value: undefined };
}

export const State_StickiesEntry: MessageFns<State_StickiesEntry> = {
  encode(message: State_StickiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Sticky.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State_StickiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState_StickiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Sticky.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): State_StickiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Sticky.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: State_StickiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Sticky.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State_StickiesEntry>, I>>(base?: I): State_StickiesEntry {
    return State_StickiesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State_StickiesEntry>, I>>(object: I): State_StickiesEntry {
    const message = createBaseState_StickiesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Sticky.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseState_UsersEntry(): State_UsersEntry {
  return { key: "", value: undefined };
}

export const State_UsersEntry: MessageFns<State_UsersEntry> = {
  encode(message: State_UsersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      User.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State_UsersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState_UsersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): State_UsersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? User.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: State_UsersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = User.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State_UsersEntry>, I>>(base?: I): State_UsersEntry {
    return State_UsersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State_UsersEntry>, I>>(object: I): State_UsersEntry {
    const message = createBaseState_UsersEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? User.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseSelectAction(): SelectAction {
  return { StickyID: "" };
}

export const SelectAction: MessageFns<SelectAction> = {
  encode(message: SelectAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.StickyID !== "") {
      writer.uint32(10).string(message.StickyID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SelectAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSelectAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.StickyID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SelectAction {
    return { StickyID: isSet(object.StickyID) ? globalThis.String(object.StickyID) : "" };
  },

  toJSON(message: SelectAction): unknown {
    const obj: any = {};
    if (message.StickyID !== "") {
      obj.StickyID = message.StickyID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SelectAction>, I>>(base?: I): SelectAction {
    return SelectAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SelectAction>, I>>(object: I): SelectAction {
    const message = createBaseSelectAction();
    message.StickyID = object.StickyID ?? "";
    return message;
  },
};

function createBaseAddAction(): AddAction {
  return { X: 0, Y: 0 };
}

export const AddAction: MessageFns<AddAction> = {
  encode(message: AddAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.X !== 0) {
      writer.uint32(8).int64(message.X);
    }
    if (message.Y !== 0) {
      writer.uint32(16).int64(message.Y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.X = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Y = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAction {
    return {
      X: isSet(object.X) ? globalThis.Number(object.X) : 0,
      Y: isSet(object.Y) ? globalThis.Number(object.Y) : 0,
    };
  },

  toJSON(message: AddAction): unknown {
    const obj: any = {};
    if (message.X !== 0) {
      obj.X = Math.round(message.X);
    }
    if (message.Y !== 0) {
      obj.Y = Math.round(message.Y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAction>, I>>(base?: I): AddAction {
    return AddAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAction>, I>>(object: I): AddAction {
    const message = createBaseAddAction();
    message.X = object.X ?? 0;
    message.Y = object.Y ?? 0;
    return message;
  },
};

function createBaseMoveAction(): MoveAction {
  return { StickyID: "", X: 0, Y: 0 };
}

export const MoveAction: MessageFns<MoveAction> = {
  encode(message: MoveAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.StickyID !== "") {
      writer.uint32(10).string(message.StickyID);
    }
    if (message.X !== 0) {
      writer.uint32(16).int64(message.X);
    }
    if (message.Y !== 0) {
      writer.uint32(24).int64(message.Y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.StickyID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.X = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Y = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveAction {
    return {
      StickyID: isSet(object.StickyID) ? globalThis.String(object.StickyID) : "",
      X: isSet(object.X) ? globalThis.Number(object.X) : 0,
      Y: isSet(object.Y) ? globalThis.Number(object.Y) : 0,
    };
  },

  toJSON(message: MoveAction): unknown {
    const obj: any = {};
    if (message.StickyID !== "") {
      obj.StickyID = message.StickyID;
    }
    if (message.X !== 0) {
      obj.X = Math.round(message.X);
    }
    if (message.Y !== 0) {
      obj.Y = Math.round(message.Y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoveAction>, I>>(base?: I): MoveAction {
    return MoveAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoveAction>, I>>(object: I): MoveAction {
    const message = createBaseMoveAction();
    message.StickyID = object.StickyID ?? "";
    message.X = object.X ?? 0;
    message.Y = object.Y ?? 0;
    return message;
  },
};

function createBaseEditAction(): EditAction {
  return { StickyID: "", content: "" };
}

export const EditAction: MessageFns<EditAction> = {
  encode(message: EditAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.StickyID !== "") {
      writer.uint32(10).string(message.StickyID);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.StickyID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditAction {
    return {
      StickyID: isSet(object.StickyID) ? globalThis.String(object.StickyID) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: EditAction): unknown {
    const obj: any = {};
    if (message.StickyID !== "") {
      obj.StickyID = message.StickyID;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditAction>, I>>(base?: I): EditAction {
    return EditAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditAction>, I>>(object: I): EditAction {
    const message = createBaseEditAction();
    message.StickyID = object.StickyID ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseAction(): Action {
  return { select: undefined, add: undefined, move: undefined, edit: undefined };
}

export const Action: MessageFns<Action> = {
  encode(message: Action, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.select !== undefined) {
      SelectAction.encode(message.select, writer.uint32(10).fork()).join();
    }
    if (message.add !== undefined) {
      AddAction.encode(message.add, writer.uint32(18).fork()).join();
    }
    if (message.move !== undefined) {
      MoveAction.encode(message.move, writer.uint32(26).fork()).join();
    }
    if (message.edit !== undefined) {
      EditAction.encode(message.edit, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.select = SelectAction.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.add = AddAction.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.move = MoveAction.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.edit = EditAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action {
    return {
      select: isSet(object.select) ? SelectAction.fromJSON(object.select) : undefined,
      add: isSet(object.add) ? AddAction.fromJSON(object.add) : undefined,
      move: isSet(object.move) ? MoveAction.fromJSON(object.move) : undefined,
      edit: isSet(object.edit) ? EditAction.fromJSON(object.edit) : undefined,
    };
  },

  toJSON(message: Action): unknown {
    const obj: any = {};
    if (message.select !== undefined) {
      obj.select = SelectAction.toJSON(message.select);
    }
    if (message.add !== undefined) {
      obj.add = AddAction.toJSON(message.add);
    }
    if (message.move !== undefined) {
      obj.move = MoveAction.toJSON(message.move);
    }
    if (message.edit !== undefined) {
      obj.edit = EditAction.toJSON(message.edit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action>, I>>(base?: I): Action {
    return Action.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action>, I>>(object: I): Action {
    const message = createBaseAction();
    message.select = (object.select !== undefined && object.select !== null)
      ? SelectAction.fromPartial(object.select)
      : undefined;
    message.add = (object.add !== undefined && object.add !== null) ? AddAction.fromPartial(object.add) : undefined;
    message.move = (object.move !== undefined && object.move !== null)
      ? MoveAction.fromPartial(object.move)
      : undefined;
    message.edit = (object.edit !== undefined && object.edit !== null)
      ? EditAction.fromPartial(object.edit)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
